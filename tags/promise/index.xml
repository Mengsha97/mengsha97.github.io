<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>promise - 标签 - Simona's Blog</title><link>http://mengsha97.github.io/tags/promise/</link><description>promise - 标签 - Simona's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 10 Mar 2020 20:27:50 +0000</lastBuildDate><atom:link href="http://mengsha97.github.io/tags/promise/" rel="self" type="application/rss+xml"/><item><title>【错误记录】Failed to fetch</title><link>http://mengsha97.github.io/posts/myerror/</link><pubDate>Tue, 10 Mar 2020 20:27:50 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/myerror/</guid><description><![CDATA[在学习过程中遇到的一个例子，无法运行，例子的代码如下
&lt;!DOCTYPE html&gt; &lt;html lang=&#34;en-US&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;utf-8&#34;&gt; &lt;title&gt;My test page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;This is my page&lt;/p&gt; &lt;script&gt; /*let promise = fetch(&#39;coffee.jpg&#39;); let promise2 = promise.then(response=&gt;response.blob()); let promise3 = promise2.then(myBlob=&gt;{ let objectURL = URL.createObjectURL(myBlob); let image = document.createElement(&#39;img&#39;); image.src = objectURL; document.body.appendChild(image); });*/ fetch(&#39;coffee.jpg&#39;) .then(response =&gt; response.blob()) .then(myBlob =&gt; { let objectURL = URL.createObjectURL(myBlob); let image = document.createElement(&#39;img&#39;); image.src = objectURL; document.body.appendChild(image); }) .catch(e =&gt; { console.log(e.message); }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 遇到的问题如下]]></description></item><item><title>【慕课网】Promise 入门教程</title><link>http://mengsha97.github.io/posts/imooc-promise/</link><pubDate>Mon, 02 Mar 2020 14:27:33 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-promise/</guid><description>讲师：翟路佳 课程：https://www.imooc.com/learn/949 代码：https://github.com/merrier/imooc-promise-sample 第一章 异步的问题 1-1 课程介绍 了解 Promise 诞生的历史背景 学会使用 Promise 解决异步回调带来的问题 掌握 Promise 的进阶用法 1-2 Promise 释义按照用途来解释
主要用于异步计算 可以将异步操作队列化，按照期望的顺序执行，返回复合预期的结果。 可以在对象之间传递和操作 Promise，帮助我们处理队列。 1-3 异步产生的原因 JavaScript 包含大量异步操作 有了 Node.js 之后，对异步的依赖进一步加剧了（无阻塞高并发，是 Node.js 的招牌；异步操作是其保障；大量操作依赖回调函数） 异步操作的常见语法 事件侦听与相应 回调 1-4 异步回调的问题 不好维护 异步回调函数会在一个新的栈运行，所以无法获取之前的栈的信息；之前的栈也无法捕获这个栈抛出的错误信息。所以没法正常使用 try catch 总结如下
嵌套层次很深，难以维护 无法正常使用 return 和 throw 无法正常检索堆栈信息 多个回调之间难以建立联系 第二章 Promise 入门 2-1 Promise 简介使用之前，初始化 Promise 实例
new Promise( /* 执行器executor */ function (resolve, reject) { //一段耗时很长的异步操作 resolve(); //数据处理完成 reject(); //数据处理出错 } ).</description></item></channel></rss>