<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>学习记录 - 分类 - Simona's Blog</title><link>http://mengsha97.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link><description>学习记录 - 分类 - Simona's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 19 Jul 2020 16:25:47 +0000</lastBuildDate><atom:link href="http://mengsha97.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/" rel="self" type="application/rss+xml"/><item><title>【学习记录】用CSS隐藏一个元素的方法</title><link>http://mengsha97.github.io/posts/hideelement/</link><pubDate>Sun, 19 Jul 2020 16:25:47 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/hideelement/</guid><description>CSS display 的值是 none。 type=&amp;ldquo;hidden&amp;quot;的表单元素。 宽度和高度都显式设置为 0。 一个祖先元素是隐藏的，该元素是不会在页面上显示 CSS visibility 的值是 hidden CSS opacity 的指是 0 如果元素中占据文档中一定的空间,元素被认为是可见的。 可见元素的宽度或高度，是大于零。 元素的 visibility: hidden 或 opacity: 0 被认为是可见的，因为他们仍然占用空间布局。</description></item><item><title>【学习记录】原生选择器的兼容性问题</title><link>http://mengsha97.github.io/posts/js-getelementby/</link><pubDate>Sun, 19 Jul 2020 16:06:54 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/js-getelementby/</guid><description> IE 会将注释节点实现为元素，所以在 IE 中调用 getElementsByTagName 里面会包含注释节点，这个通常是不应该的 getElementById 的参数在 IE8 及较低的版本不区分大小写 IE7 及较低的版本中，表单元素中，如果表单 A 的 name 属性名用了另一个元素 B 的 ID 名并且 A 在 B 之前，那么 getElementById 会选中 A IE8 及较低的版本，浏览器不支持 getElementsByClassName</description></item><item><title>【学习记录】JavaScript中数组的sort函数</title><link>http://mengsha97.github.io/posts/js-sort/</link><pubDate>Tue, 14 Apr 2020 15:22:45 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/js-sort/</guid><description>JavaScript 中的数组的 sort 函数使用示例 假如数组一开始是这样的
items: [23, 23, 11, 2, 41, 67, 23, 23231]; 使用完 sort 后
sortitems:function(){ return this.items.sort() } 结果
显然可以看出它的排序结果是一个一个位的数字来排的，从第一位（左边第一位）开始排，为了让它能够实现我们想要的效果，可以添加一个这样的函数：
function sortNumber(a, b) { return a - b; } 然后在使用 sort 时，把函数名放在 sort 函数的调用里，即
sortitems:function(){ return this.items.sort(sortNumber) } 就可以得到想要的结果了</description></item><item><title>【学习记录】关于npm install一些参数的问题</title><link>http://mengsha97.github.io/posts/npm-install-xxx/</link><pubDate>Sat, 11 Apr 2020 00:26:21 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/npm-install-xxx/</guid><description>npm install XXXnode_modules 下安装了，但是不会写入 package.json 里面
npm install XXX -g把包安装在全局了
npm install XXX -savenode_modules 下安装了，添加了依赖在 package.json 中的 dependencies 里面,即生产环境中要下载的包
npm isstall XXX -save-devnode_modules 下安装了，添加了依赖在 package.json 中的 devDependencies 里面，开发模式中要用的包</description></item><item><title>【学习记录】初步探索vue数据双向绑定原理</title><link>http://mengsha97.github.io/posts/vue-databind-source/</link><pubDate>Mon, 06 Apr 2020 00:21:19 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/vue-databind-source/</guid><description><![CDATA[这是在看一个实战课的时候，老师讲到的一个知识点，我觉得挺有意思的，虽然很简单，但是让我稍微了解了一下框架背后的故事，所以记录一下~ 源码如下
&lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34; /&gt; &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&#34;text&#34; id=&#34;userName&#34; /&gt; &lt;br /&gt; &lt;span id=&#34;uName&#34;&gt;&lt;/span&gt; &lt;script&gt; var obj = { pwd: &#34;123456&#34;, }; Object.defineProperty(obj, &#34;myName&#34;, { get: function () { console.log(&#34;get init&#34;); }, set: function (val) { console.log(&#34;set init&#34;); document.getElementById(&#34;uName&#34;).innerText = val; document.getElementById(&#34;userName&#34;).value = val; }, }); document.getElementById(&#34;userName&#34;).addEventListener(&#34;keyup&#34;, function (event) { obj.myName = event.target.value; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; ]]></description></item><item><title>【学习记录】CSS</title><link>http://mengsha97.github.io/posts/log-css/</link><pubDate>Tue, 31 Mar 2020 15:30:11 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/log-css/</guid><description><![CDATA[px 与 em 的转换在大多数浏览器下的默认换算是 1em==16px.可以参考 http://riddle.pl/emcalc/ 选择器优先级计算一个选择器的优先级可以说是由四个部分相加(分量)，可以认为是个十百千——四位数的四个位数：
千位：如果声明在 style 的属性（内联样式）则该位得一分。这样的生命没有选择器，所以得分总是 1000。 百位：选择器中包含 ID 选择器则该位得一分。 十位：选择器中包含类选择器、属性选择器或者伪类则该位得一分。 个位：选择器中包含元素、伪元素选择器则该位得一分。 例如：
选择器 千位 百位 十位 个位 优先级 h1 0 0 0 1 0001 h1 + p::first-letter 0 0 0 3 0003 li &gt; a[href*=&ldquo;en-US&rdquo;] &gt; .inline-warning 0 0 2 2 0022 #identifier 0 1 0 0 0100 内联样式 1 0 0 0 1000 但是“!important”可以覆盖掉所有优先级的计算]]></description></item><item><title>【学习记录】一些跨浏览器的方法</title><link>http://mengsha97.github.io/posts/cross-browser/</link><pubDate>Mon, 30 Mar 2020 00:49:20 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/cross-browser/</guid><description><![CDATA[ SVG 跨浏览器支持 方法一在 img 元素内使用“src”属性引用 PNG 或 JPG 等低版本浏览器支持的类型，并且用“srcset”属性引用 SVG 类型，这种情况，支持的浏览器将加载 SVG，较旧的浏览器将加载 PNG 等。例如，
&lt;img src=&#34;equilateral.png&#34; alt=&#34;triangle with equal sides&#34; srcset=&#34;equilateral.svg&#34; /&gt; 方法二将 SVG 作为 CSS 背景图像，如下,旧浏览器会坚持 PNG 等，支持 SVG 的浏览器将加载 SVG
background: url(&#34;fallback.png&#34;) no-repeat center; background-image: url(&#34;image.svg&#34;); background-size: contain; ]]></description></item><item><title>【学习记录】“文盲”时刻</title><link>http://mengsha97.github.io/posts/log-iknow/</link><pubDate>Sun, 29 Mar 2020 23:05:32 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/log-iknow/</guid><description>SEO：Search Engine Optimization，汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。——————来源：百度百科
光栅图：也叫做位图、点阵图、像素图，简单的说，就是最小单位由像素构成的图，只有点的信息，缩放时会失真。每个像素有自己的颜色，类似电脑里的图片都是像素图，你把它放很大就会看到点变成小色块了。</description></item><item><title>【学习记录】HTML</title><link>http://mengsha97.github.io/posts/log-html/</link><pubDate>Wed, 25 Mar 2020 11:27:49 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/log-html/</guid><description><![CDATA[实体引用 原义字符 等价字符引用 &lt; &amp;lt; &lsquo;&gt;&rsquo; &amp;gt; &quot; &amp;quot; ' &amp;apos; &amp; &amp;amp; 指定文档字符编码utf-8 一个通用的字符集，它包含了任何人类语言中的大部分的字符。一些浏览器会自动修正错误的编码，但是应该要手动为页面设置编码为 utf-8，如下：
&lt;meta charset=&#34;utf-8&#34; /&gt; 来避免在其他浏览器中可能出现的潜在问题。
使用标题 最好只对每个页面使用一次&lt;h1&gt;，这是顶级标题，所有其他标题位于层次结构中的下方。 确保在层次结构中以正确的顺序使用标题。 在可用的六个标题级别中，每页最好使用不超过三个。 屏幕阅读器screen reader，使页面结构化，也能让屏幕阅读器更好识别内容的不同元素。
超链接的 download 属性当链接到要下载的资源而不是在浏览器中打开时，可以使用 download 属性来提供一个默认的保存文件名（此属性只适用于同源 URL），如下是一个下载链接到 Firefox 的 Windows 最新版本的示例：
&lt;a href=&#34;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=en-US&#34; download=&#34;firefox-latest-64bit-installer.exe&#34; &gt; Download Latest Firefox for Windows (64-bit) (English, US) &lt;/a&gt; 效果如下： Download Latest Firefox for Windows (64-bit) (English, US) &lt;time&gt;元素HTML 支持将时间和日期标记为可供机器识别的格式的 &lt;time&gt; 元素。例如：
&lt;!-- 标准简单日期 --&gt; &lt;time datetime=&#34;2016-01-20&#34;&gt;20 January 2016&lt;/time&gt; &lt;!]]></description></item><item><title>【学习记录】利用python解决chrome异步加载本地文件报错</title><link>http://mengsha97.github.io/posts/try-python-cross/</link><pubDate>Sat, 14 Mar 2020 21:35:25 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/try-python-cross/</guid><description>本文参考： https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/set_up_a_local_testing_server 安装 Python(windows 下)
转到 python.org 在“下载”部分下，单击 Python“3.xxx”的链接。 在页面的底部，选择 Windows x86 可执行文件安装程序并下载它。 当它已经下载，运行它。 在第一个安装程序页面上，确保选中了“将 Python 3.xxx 添加到 PATH”复选框。 单击安装，然后在安装完成后单击关闭。 打开命令提示符，检查 Python 是否安装，输入以下命令：（“V”是大写）
python -V 使用 cd 命令导航到示例所在的目录。
输入命令在该目录中启动服务器：
#如果上面返回的Python版本是3.X python -m http.server #如果上面返回的Python版本是2.X python -m SimpleHTTPServer 默认情况下这将在本地 Web 服务器上的端口 8000 上运行目录的内容，可以通过转到 localhost:8000Web 浏览器中的 URL 来访问此服务器。在这里可以看到列出的目录的内容，点击想运行的 HTML 文件。 注意：如果您已经在端口 8000 上运行了某些东西，则可以通过运行 server 命令，然后选择另一个端口号（例如 python -m http.server 7800 （Python 3.x）或 python -m SimpleHTTPServer 7800 （Python 2.x））来选择另一个端口。然后可以访问 localhost:7800。
如果要了解如何在本地运行服务器端语言，可以参考 https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/set_up_a_local_testing_server 的最后部分。
这篇博客几乎是从上面照搬下下来的，以防侵权，我在文章开头已经标明出处，写在这里的目的是怕我自己会忘记还有一个这样的方法，再加上，写在这里也更方便我之后查找。</description></item></channel></rss>