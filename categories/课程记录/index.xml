<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>课程记录 - 分类 - Simona's Blog</title><link>http://mengsha97.github.io/categories/%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/</link><description>课程记录 - 分类 - Simona's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 05 Dec 2020 22:03:59 +0000</lastBuildDate><atom:link href="http://mengsha97.github.io/categories/%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/" rel="self" type="application/rss+xml"/><item><title>【慕课网】带你快速入坑ES6</title><link>http://mengsha97.github.io/posts/imooc-es6fast/</link><pubDate>Sat, 05 Dec 2020 22:03:59 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-es6fast/</guid><description><![CDATA[讲师：谢成 课程：https://www.imooc.com/learn/1246 第一章 1-1 ES6 学习的正确姿势 ES6 和 ES2015 指的是同一个版本 安装 VSCode 编辑器的插件——Live Server（差量即时编译） 第二章 ES6 特性入坑 2-1 JS 中可以声明常量吗 常量是什么
当前的量只可以读不可以写
ES5 里声明常量的方法
Object.defineProperty(window, &#34;es&#34;, { value: &#34;es6&#34;, writable: false, //不可写 }); console.log(res); //es6 es = &#34;es2015&#34;; //不会报错 console.log(res); //es6 ES6 声明常量要注意的
声明 const 常量时就要赋值，不然会报错；
通过 const 声明的常量不允许重复声明；
通过 const 声明的常量不属于顶层对象 window，这样不会污染全局变量；
当用 const 声明常量时，不存在变量提升，即下面所写会报错，要先定义，后使用
console.log(str); const str = &#34;es6&#34;; const 变量具有块级作用域
2-2 const 声明的常量真的不可以改变吗 例 1 对象的属性被改变
const esObj = { name: &#34;es6&#34;, year: 2015, }; esObj.]]></description></item><item><title>【慕课网】六个案例学会响应式布局</title><link>http://mengsha97.github.io/posts/imooc-self-adaption/</link><pubDate>Sun, 22 Nov 2020 16:45:45 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-self-adaption/</guid><description><![CDATA[第一章 课程介绍讲师：大谷 课程：https://www.imooc.com/learn/1285 1-1 课程介绍 课程安排
CSS 中媒体查询的作用和使用方法
flex 弹性盒子的用法
rem 的作用和使用方法
响应式布局、弹性布局等六个课程案例
mediaquery 媒体查询 2-1 什么是媒体查询概念：为不同尺寸的屏幕设定不同的 CSS 样式
2-2 @media 常用参数 属性名称 作用 width、height 浏览器可视宽度、高度 device-width 设备屏幕的宽度 device-height 设备屏幕的高度 2-3 媒体查询其他引入方式-1&lt;style media=&#34;(min-device-width:100px) and (max-device-width:300px)&#34;&gt; #div0 { background-color: red; } &lt;/style&gt; 媒体查询其他引入方式-2&lt;link href=&#34;css/css-1.css&#34; rel=&#34;stylesheet&#34; media=&#34;(min-device-width:100px) and (max-device-width:300px)&#34; /&gt; 媒体查询其他引入方式-3@media (min-device-width: 400px) and (max-device-width: 500px) { #div0 { background-color: blue; } } 第三章 flex 基础与应用 3-1 什么是 flex概念：FlexiableBox 即是弹性盒子，用来进行弹性布局，可以配合 rem 处理尺寸的适配问题]]></description></item><item><title>【慕课网】一课全面掌握主流CSS布局</title><link>http://mengsha97.github.io/posts/imooc-csslayout/</link><pubDate>Wed, 15 Apr 2020 21:11:41 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-csslayout/</guid><description><![CDATA[讲师：KingJ 课程：https://www.imooc.com/learn/1189 居中布局 水平居中布局指当前元素在父级元素容器中，水平方向是居中显示的
inline-block+text-align 属性配合使用 关键代码&lt;div id=&#34;parent&#34;&gt; &lt;div id=&#34;child&#34;&gt;子级元素&lt;/div&gt; &lt;/div&gt; #parent{ text-align:center; } #child{ display:inline-block; } 属性的说明 text-align 属性：是为文本内容设置对齐方式 left：左对齐 center：居中对齐 right：右对齐 display 属性： block：块级元素 inline：内联元素（text-align 属性有效） 当 display 设置为 inline 时，css 中的 width 和 height 属性是无效的 inline-block：行内块级元素（块级+内联） width 和 height 属性值是有效的 优缺点 优点：浏览器兼容性比较好 缺点：text-align 属性具有继承性，导致子级元素的文本也是居中显示的 解决方式：可以在子级元素中设置 text-align 为想要的效果，这样会覆盖父级元素设置的效果 table+margin 属性配合使用 关键代码&lt;div class=&#34;parent&#34;&gt; &lt;div class=&#34;child&#34;&gt;子级元素&lt;/div&gt; &lt;/div&gt; .child{ display:table; margin:0 auto; } 属性说明 margin 属性：外边距 一个值——上右下左四个方向 两个值——第一个表示上下，第二个表示左右 三个值——第一个值表示上，第二个值表示左右，第三个值表示下 auto：表示浏览器自动分配，浏览器会等分左右外边距 四个值——分别代表上右下左 display 设置为 block 和 table 都可水平居中 设置为 inline 并且在块中添加文字，不会水平居中， 设置为 inline-block 也不会水平居中 优缺点 优点：只需要对子级元素进行设置就可以实现水平方向居中效果 缺点：如果子级元素脱离文档流，导致 margin 属性的值无效 css 中脱离文档流的方式 设置 float 设置 position 为 absolute 设置 position 为 fixed absolute+transform 属性配合使用 关键代码&lt;div class=&#34;parent&#34;&gt; &lt;div class=&#34;child&#34;&gt;居中&lt;/div&gt; &lt;/div&gt; .]]></description></item><item><title>【技术胖】vue2.X</title><link>http://mengsha97.github.io/posts/jspang-basic-vue/</link><pubDate>Tue, 14 Apr 2020 09:59:54 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/jspang-basic-vue/</guid><description><![CDATA[希望学完这些课，对 vue 的理解能更加深入，开发也能更得心应手 这篇博客，记录一些 vue 的知识点和课上用到过的插件
vue 基础 插件 live-server这是一个快速服务器搭建的插件
安装npm install live-server -g 启动直接在要启动的项目路径下输入
live-server 端口在 8080
方法 对象形式的数组怎么进行排序例如对象数组是这样的
students: [ { name: &#34;jspang&#34;, age: 32 }, { name: &#34;Panda&#34;, age: 30 }, { name: &#34;PanPaN&#34;, age: 21 }, { name: &#34;King&#34;, age: 45 }, ]; 数组对象方法排序:
function sortByKey(array, key) { return array.sort(function (a, b) { var x = a[key]; var y = b[key]; return x &lt; y ? -1 : x &gt; y ?]]></description></item><item><title>【慕课网】Vue2.0+Node.js+MongoDB全栈打造商城系统</title><link>http://mengsha97.github.io/posts/imooc-mongodb-vue-express-demo/</link><pubDate>Wed, 08 Apr 2020 23:24:12 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-mongodb-vue-express-demo/</guid><description>去年看了这个视频，然后根据方法一步步做出了毕设，考研一年没有写过代码了，很多都忘了，现在为了重构毕设的项目，重新看了这个视频，vue 已经更新了，比如视频创建项目是用“vue init”，但是现在版本的 vue-cli 用的是“vue create”，于是为了跟上新技术，很多地方没有仿照视频一起做，而是看了官方文档再写的。这篇博客记录一下课程上提到的一些插件和便捷开发的方法。
express-generator看 express 中文网 https://www.expressjs.com.cn/starter/generator.html 用 express-generator 新建一个 server 目录
express --view=pug server vue-lazyload可以在www.npmjs.com上查找到vue-lazyload，根据文档的内容来实现图片懒加载
pm2基于进程管理，可以实现当前电脑的负载均衡
mongoose对 MongoDB 的封装
tips 用 MongoDB 创建表时，表名后面一定要加“s”</description></item><item><title>【慕课网】从基础到实战 手把手带你掌握新版Webpack4.0</title><link>http://mengsha97.github.io/posts/imooc-webpack4/</link><pubDate>Wed, 01 Apr 2020 21:40:59 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-webpack4/</guid><description><![CDATA[讲师：Dell 课程：https://coding.imooc.com/class/chapter/316.html#Anchor webpack 的两种安装方式 全局安装 npm install webpack webpack-cli -g 尽量不要全局安装，因为有时不同的项目是用不同版本的 webpack 打包的
卸载 webpack
npm uninstall webpack webpack-cli -g 在命令行输入
webpack -v 检验是否安装成功
在项目内安装 npm install webpack webpack-cli -D 或
npm install webpack webpack-cli --save-dev &ldquo;&ndash;save-dev&quot;等价于&rdquo;-D&quot;
在命令行输入
npx webpack -v 检验是否安装成功，使用 npx 是在当前目录下找命令
安装固定版本号的 webpack
npm install webpack@XX.XX.XX webpack-cli -D 安装前可以输入
npm info webpack 检验该版本是否存在
更改 webpack 的配置文件webpack 的默认配置文件是 webpack.config.js，如果要将它改成 webpackconfig.js，需要执行下条命令
npx webpack --config webpackconfig.js 模块导出/引入方式 模块导出 //ES Moudule 模块导出方式 export default Header; //CommonJS 模块导出 module.]]></description></item><item><title>【慕课网】Vue+Webpack打造todo应用</title><link>http://mengsha97.github.io/posts/imooc-webpack-vue/</link><pubDate>Tue, 31 Mar 2020 21:16:59 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-webpack-vue/</guid><description>讲师：Jokcy 课程：https://www.imooc.com/learn/935 课程介绍 课程目标 配置开发时前端工程 实现一个简单的 TODO 应用 优化配置达到上线标准 步骤 1. 创建一个新项目 2. 在命令行输入npm init 生成 package.json 文件，
3. 然后安装 webpack,vue,vue-loader，在命令行输入npm i webpack vue vue-loader 产生 WARN 警告一Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.) mkdirp 旧版本已经移除，要更新到新版本，在命令行输入命令更新：
npm install -g mkdirp 警告二npm WARN vue-loader@15.9.1 requires a peer of css-loader@* but none is installed. You must install peer dependencies yourself.</description></item><item><title>【慕课网】DOM事件探秘</title><link>http://mengsha97.github.io/posts/imooc-dom/</link><pubDate>Thu, 12 Mar 2020 16:34:54 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-dom/</guid><description><![CDATA[讲师：Amy 课程：https://www.imooc.com/learn/138 第一章 事件流 1-1 [DOM] 事件冒泡事件流：描述的是从页面中接受事件的顺序 IE-事件冒泡流：即事件最开始由最具体的元素（文档中嵌套层次最深的那个节点）接受，然后逐级向上传播至最不具体的节点（文档）。
1-2 [DOM] 事件捕获Netscape-事件捕获流：不太具体的节点应该更早接收到事件，而最具体的节点最后接收到事件。
第二章 事件处理程序 2-1 HTML 事件处理程序例如：
&lt;input type=&#34;button&#34; value=&#34;按钮&#34; id=&#34;btn&#34; onclick=&#34;showMes()&#34; /&gt; 缺点：HTML 和 JS 代码紧密的耦合在一起;更新函数名时，JS 代码和 HTML 都要进行修改
2-2 DOM0 级事件处理程序较传统的方式：把一个函数赋值给一个事件的处理程序属性，用的比较多的方法，简单、跨浏览器的优势 例如：
var btn = document.getElementById(&#39;btn&#39;); btn.onclick = function(){ alert(&#39;这是通过DOM0级添加的事件&#39;); } btn.onclick = null;//删除事件 没有 HTML 事件处理程序的缺点
2-3 DOM2 级事件处理程序没有 DOM1 级 DOM2 级定义了两个方法： 用于处理指定和删除事件处理程序的操作 addEventListener()和 removeEventListener()。 所有 DOM 节点包含这两个方法 接收三个参数：要处理的事件名、作为事件处理程序的函数和布尔值 例如：
var btn = document.getElementById(&#39;btn&#39;); btn.addEventListener(&#39;click&#39;,showMes,false);//false可以兼容浏览器，冒泡阶段 btn.addEventListener(&#39;click&#39;,function(){ alert(this.value); },false);//按钮被点击后，先执行上面的事件，再进行这个事件 btn.]]></description></item><item><title>【慕课网】Promise 入门教程</title><link>http://mengsha97.github.io/posts/imooc-promise/</link><pubDate>Mon, 02 Mar 2020 14:27:33 +0000</pubDate><author><name>Simona</name><uri>https://github.com/Mengsha97</uri><email>laimengsha@qq.com</email></author><guid>http://mengsha97.github.io/posts/imooc-promise/</guid><description>讲师：翟路佳 课程：https://www.imooc.com/learn/949 代码：https://github.com/merrier/imooc-promise-sample 第一章 异步的问题 1-1 课程介绍 了解 Promise 诞生的历史背景 学会使用 Promise 解决异步回调带来的问题 掌握 Promise 的进阶用法 1-2 Promise 释义按照用途来解释
主要用于异步计算 可以将异步操作队列化，按照期望的顺序执行，返回复合预期的结果。 可以在对象之间传递和操作 Promise，帮助我们处理队列。 1-3 异步产生的原因 JavaScript 包含大量异步操作 有了 Node.js 之后，对异步的依赖进一步加剧了（无阻塞高并发，是 Node.js 的招牌；异步操作是其保障；大量操作依赖回调函数） 异步操作的常见语法 事件侦听与相应 回调 1-4 异步回调的问题 不好维护 异步回调函数会在一个新的栈运行，所以无法获取之前的栈的信息；之前的栈也无法捕获这个栈抛出的错误信息。所以没法正常使用 try catch 总结如下
嵌套层次很深，难以维护 无法正常使用 return 和 throw 无法正常检索堆栈信息 多个回调之间难以建立联系 第二章 Promise 入门 2-1 Promise 简介使用之前，初始化 Promise 实例
new Promise( /* 执行器executor */ function (resolve, reject) { //一段耗时很长的异步操作 resolve(); //数据处理完成 reject(); //数据处理出错 } ).</description></item></channel></rss>